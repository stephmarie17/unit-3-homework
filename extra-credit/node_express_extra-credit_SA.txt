Node.js Tutorial for Beginners: Learn Node in 1 Hour

	This tutorial addressed why Node.js is essential to learn, described its architecture, explained the basics of how Node.js works, and included a section of step-by-step tutorials in order to highlight the basics of working with Node.js. As this tutorial explained, Node.js is an ideal tool for prototyping and agile development, as it is fast, highly scalable, and allows developers to use fewer lines and fewer files, while users enjoy a faster response time. In addition, Node.js uses JavaScript, which makes it the ideal backend tool for front-end developer to use to expand their skillset to full-stack development, in addition to a wealth of open source libraries available for Node.js.
	The architecture of Node.js, which his a runtime environment for JavaScript code, is a v8 engine, also used by Google Chrome, plus other capabilities that allow developers to execute Javascript outside of the browser. Unlike in the browser, Node.js does not have a document object model, and therefore there are some differences when running JavaScript using Node.js, such as the ‘window’ object. Instead, Node.js utilizes ‘global’, and is asynchronous in nature, utilizing an event queue in order to serve more clients without using more hardware. The single threaded event loop model is at the core of why Node.js is so fast and scalable. Meanwhile, this tutorial warned that this strength is what makes Node.js ideal for data-intensive and real-time applications as opposed to CPU-intensive apps.
	In addition to providing this well-rounded background of Node.js and its architecture, the tutorial also explained the modular system, stressing that global declarations should be avoided so that they do not override one another. The tutorial also detailed essential modules in the Node.js documentation, including the Path Module, OS Module, File System Module, and Event Module, in addition to how to create custom classes. These walkthrough aspects of the tutorial helped me better understand exporting functions and classes and how Node.js runs applications. It was a helpful, informative tutorial that was an excellent supplement to the Bootcamp curriculum.

Express.js Tutorial: Build RESTful APIs with Node and Express 
	In this tutorial on Express.js, the instructor covered RESTful APIs, basics of Express, utilizing Node.js for creating servers and http requests, and different ways to validate requests. These are topics not yet covered in class, making this tutorial a solid foundation to introduce me to Express.js, which is a fast, lightweight framework for building applications, as well as other libraries available for Node.js and working on the back-end.
	This tutorial did a really good job of breaking down clear definitions of RESTful (Representational State Transfer) Services or APIs, as well as http requests. Because Express utilizes http principles, understanding CRUD (Create, Read, Update, Delete) operations is essential for effectively working with Express. This section of the tutorial also broke down how clients (the front end) make requests to the server (the back end) using http requests. In addition to this, the tutorial also covered http request verbs, which include Get, Post, Put, Delete.
	After covering this foundational principles, the tutorial moved on to Express. Frameworks help develop proper structure for applications, and Express is one of the most widely used frameworks for working with the back end. Express can be used with Node.js to build APIs, Web Applications, and enhances the performance of Node.js features. This tutorial provides a step-by-step process for installing Express and explains the syntax for utilizing the http request handling aspects of Express, including accounting for errors, validating requests, and other applications that enhance the process of utilizing the Express framework.
	This tutorial was more challenging to follow along with than the tutorial covering Node.js because it was my first introduction to Express and working with servers, while we have used Node.js already in class. However, I think that following this tutorial before being introduced to Express through the course was helpful, because now I have a basic understanding on what Express is, how Express is used with Node.js, and what http requests are and how they work, which in the past I had only experienced from the client-side. 